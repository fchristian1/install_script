#!/bin/bash
#common packages
sudo echo "Install"
#git wget curl gpg apt-transport-https ca-certificates software-properties-common gnupg unzip
common_packages() {
	if ! (dpkg -l | grep -Eq '^ii\s+git\s'); then
		echo "Installing git"
		sudo apt update
		sudo apt install -y git
		config_git
		echo "git installed"
	fi
	if ! (dpkg -l | grep -Eq '^ii\s+wget\s'); then
		echo "Installing wget"
		sudo apt update
		sudo apt install -y wget
		echo "wget installed"
	fi
	if ! (dpkg -l | grep -Eq '^ii\s+curl\s'); then
		echo "Installing curl"
		sudo apt update
		sudo apt install -y curl
		echo "curl installed"
	fi
	if ! (dpkg -l | grep -Eq '^ii\s+gpg\s'); then
		echo "Installing gpg"
		sudo apt update
		sudo apt install -y gpg
		echo "gpg installed"
	fi
	if ! (dpkg -l | grep -Eq '^ii\s+apt-transport-https\s'); then
		echo "Installing apt-transport-https"
		sudo apt update
		sudo apt install -y apt-transport-https
		echo "apt-transport-https installed"
	fi
	if ! (dpkg -l | grep -Eq '^ii\s+ca-certificates\s'); then
		echo "Installing ca-certificates"
		sudo apt update
		sudo apt install -y ca-certificates
		echo "ca-certificates installed"
	fi
	if ! (dpkg -l | grep -Eq '^ii\s+software-properties-common\s'); then
		echo "Installing software-properties-common"
		sudo apt update
		sudo apt install -y software-properties-common
		echo "software-properties-common installed"
	fi
	if ! (dpkg -l | grep -Eq '^ii\s+gnupg\s'); then
		echo "Installing gnupg"
		sudo apt update
		sudo apt install -y gnupg
		echo "gnupg installed"
	fi
	if ! (dpkg -l | grep -Eq '^ii\s+unzip\s'); then
		echo "Installing unzip"
		sudo apt update
		sudo apt install -y unzip
		echo "unzip installed"
	fi
	echo "Common packages installed"
}

install_google_chrome() {
	echo "Installing Google Chrome"
	mkdir /etc/apt/keyrings
	wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo tee /etc/apt/keyrings/google.asc >/dev/null
	sudo sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/google.asc] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
	sudo apt-get update
	sudo apt-get install -y google-chrome-stable
	echo "Google Chrome installed"
	return 0
}

install_vscode() {
	echo "Installing VSCode"
	sudo apt-get install wget gpg
	wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >packages.microsoft.gpg
	sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
	echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list >/dev/null
	rm -f packages.microsoft.gpg
	sudo apt-get update && sudo apt-get install -y code
	echo "VSCode installed"
	return 0
}

install_docker() {
	echo "Installing Docker"
	sudo install -m 0755 -d /etc/apt/keyrings
	sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
	sudo chmod a+r /etc/apt/keyrings/docker.asc

	# Add the repository to Apt sources:
	echo \
		"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
	$(. /etc/os-release && echo "$VERSION_CODENAME") stable" |
		sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
	sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
	sudo usermod -aG docker $USER
	newgrp docker
	echo "Docker version: $(docker -v)"
	echo "$(docker compose version)"
	echo "Docker installed"
	return 0
}
install_nvm() {
	echo "Installing NVM"
	#get the last tag version from the nvm repository
	NVM_VERSION=$(curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest | grep tag_name | cut -d '"' -f 4)
	echo "Installing NVM version $NVM_VERSION"
	wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh | bash
	export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
	[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
	[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
	nvm install --lts
	nvm use --lts
	echo "Node version: $(node -v)"
	echo "NPM version: $(npm -v)"
	return 0
}

install_go() {
	echo "Installing Go"
	sudo add-apt-repository --yes --update ppa:longsleep/golang-backports
	sudo apt install -y golang-go
	echo "Go installed"
	return 0
}

install_ansible() {
	echo "Installing Ansible"
	sudo add-apt-repository --yes --update ppa:ansible/ansible
	sudo apt install -y ansible
	return 0
}

install_terraform() {
	echo "Installing Terraform"
	wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg >/dev/null
	gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
	echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
	sudo apt-get update && sudo apt-get install -y terraform
	terraform -install-autocomplete
	echo "Terraform installed"
	echo "Terraform version: $(terraform -version)"
	return 0
}

install_aws_cli() {
	echo "Installing AWS CLI"
	curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
	unzip -q awscliv2.zip
	sudo ./aws/install
	rm -rf awscliv2.zip aws
	echo "AWS CLI version: $(aws --version)"
	echo "AWS CLI installed"
	return 0
}

install_azure_cli() {
	echo "Installing Azure CLI"
	curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
	echo "Azure CLI installed"
	return 0
}

install_gcp_cli() {
	echo "Installing GCP CLI"
	curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
	echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
	sudo apt-get update && sudo apt-get install -y google-cloud-cli
	echo "GCP CLI installed"
	return 0
}
install_gh() {
	(type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) &&
		sudo mkdir -p -m 755 /etc/apt/keyrings &&
		wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg >/dev/null &&
		sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg &&
		echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null &&
		sudo apt update &&
		sudo apt install gh -y
}

install_slack() {
	echo "Installing Slack"
	sudo snap install slack
	echo "Slack installed"
	return 0
}

configer() {
	$1 | tee -a ./config.log
}

config_ssh() {
	echo "Configuring SSH"
	echo "get your ssh email: "
	read SSH_EMAIL
	ssh-keygen -t rsa -b 4096 -C "$SSH_EMAIL"
	eval "$(ssh-agent -s)"
	ssh-add ~/.ssh/id_rsa
	echo "SSH configured"
	return 0
}

config_git() {
	echo "Configuring Git"
	echo "get your git username: "
	read GIT_USERNAME
	echo "get your git email: "
	read GIT_EMAIL
	git config --global user.name "$GIT_USERNAME"
	git config --global user.email "$GIT_EMAIL"
	# git config branch main name
	git config --global init.defaultBranch main
	# git push --set-upstream origin main  set this as default
	git config --global push.default current
	echo "Git configured"
	return 0
}

installer() {
	$1 | tee -a ./install.log
}

common_packages

#!/bin/bash

# Menüdefinitionen als Variablen
MAIN_MENU="
Main Menu
1) Desktop install's
2) Environments install's
3) Services install's
4) Configuration's

q) Exit
"

SUBMENU1="
Main Menu > Desktop installs
1) Google Chrome
2) VSCode
3) Slack

q) Zurück <---
"

SUBMENU2="
Main Menu > Environments installs
1) gh cli
2) Docker
3) NVM
4) Go
5) Ansible
6) Terraform
7) AWS CLI
8) AZURE CLI
9) GCP CLI

q) Zurück <---
"

SUBMENU3="
Main Menu > Services installs
1) Grafana

q) Zurück <---
"

SUBMENU31="
Main Menu > Services installs > Grafana
1) Grafana
2) Prometheus
3) Loki
4) node_exporter
5) promtail

q) Zurück <---
"

SUBMENU4="
Main Menu > Configuration's
1) ssh
2) git

q) Zurück <---
"
# Funktion für die Menüanzeige und Auswahl
display_menu() {
	local menu="$1"
	local -n actions=$2
	local prompt="${3:-Bitte wählen Sie eine Option: }"
	while true; do
		echo "$menu"
		read -p "$prompt" choice
		if [[ -z "$choice" ]]; then
			continue
		fi
		if [[ -n "${actions[$choice]}" ]]; then
			${actions[$choice]}
			[[ $? -eq 1 ]] && return
		fi
	done
}

# Aktionen für die Menüs
main_menu_actions=(
	[1]="submenu1"
	[2]="submenu2"
	[3]="submenu3"
	[4]="submenu4"
	[q]="exit_program"
)

submenu1_actions=(
	[1]="installer install_google_chrome"
	[2]="installer install_vscode"
	[3]="installer install_slack"
	[q]="return_to_main"
)

submenu2_actions=(
	[1]="installer install_gh"
	[2]="installer install_docker"
	[3]="installer install_nvm"
	[4]="installer install_go"
	[5]="installer install_ansible"
	[6]="installer install_terraform"
	[7]="installer install_aws_cli"
	[8]="installer install_azure_cli"
	[9]="installer install_gcp_cli"
	[q]="return_to_main"
)
submenu3_actions=(
	[1]="submenu31"
	[q]="return_to_main"
)
submenu31_actions=(
	[1]="installer install_grafana"
	[2]="installer install_prometheus"
	[3]="installer install_loki"
	[4]="installer install_node_exporter"
	[5]="installer install_promtail"
	[q]="return_to_main"
)
submenu4_actions=(
	[1]="configer config_ssh"
	[2]="configer config_git"
	[q]="return_to_main"
)

# Funktion für die Submenüs
submenu1() {
	display_menu "$SUBMENU1" submenu1_actions
}
submenu2() {
	display_menu "$SUBMENU2" submenu2_actions
}
submenu3() {
	display_menu "$SUBMENU3" submenu3_actions
}
submenu31() {
	display_menu "$SUBMENU31" submenu31_actions
}
submenu4() {
	display_menu "$SUBMENU4" submenu4_actions
}

# Beispiel-Funktionen für die Aktionen

return_to_main() {
	return 1
}

exit_program() {
	echo "Programm beendet."
	exit 0
}

# Start des Programms mit dem Hauptmenü
display_menu "$MAIN_MENU" main_menu_actions
